=pod

=head1 NAME

B<sally> -- a tool for embedding strings in vector spaces

=head1 SYNOPSIS

B<sally> [B<options>] [B<-c> I<config>] I<input> I<output>

=head1 DESCRIPTION

B<sally> is a small tool for mapping a set of strings to a set of
vectors. This mapping is referred to as embedding and allows for
applying techniques of machine learning and data mining for analysis
of string data. B<sally> can be applied to several types of string data,
such as text documents, DNA sequences or log files, where it can
handle common formats such as directories, archives and text files of
string data.

The embedding of strings is carried out incrementally, where B<sally>
first loads a chunk of strings from I<input>, computes the mapping to
vectors and then writes the chunk of vectors to I<output>. The
configuration of this process, such as the input format, the embedding
setting and the output format, are specified in the file I<config> and
additionally using command-line options.

    .---------.                        .----------.
    |   dir   |                        |   text   |
    |   arc   |   \   .---------.   /  |  libsvm  |
    |  lines  |   --  |  Sally  |  --  |  matlab  |
    |   ...   |   /   '---------'   \  |   ...    |
    '---------'                        '----------'
      Input           Embedding          Output 


B<sally> implements a standard technique for mapping strings to a
vector space that is often referred to as vector space model or
bag-of-words model. The strings are characterized by a set of
features, where each feature is associated with one dimension of the
vector space.  The following types of features are supported by
B<sally>: bytes, words, n-grams of bytes and n-grams of words.

B<sally> proceeds by counting the occurrences of the specified
features in each string and generating a sparse vector of count
values.  Alternatively, binary or TF-IDF values can be computed and
stored in the vectors. B<sally> then normalizes the vector, for
example using the L1 or L2 norm, and outputs it in a specified format,
such as plain text, LibSVM, Cluto or Matlab format.

The processing chain of B<sally> makes use of sparse data structures,
such that high-dimensional vectors with millions of dimensions can be
handled efficiently.  All features are indexed by a hash function,
where the bit width of this function can be adjusted according to the
characteristics of the data.  In several settings, a hash width
between 22 and 26 bit already suffices to store millions of features
with little loss of accuracy.

=head1 CONFIGURATION

The configuration of B<sally> is specified in a configuration file.
This file is structured into the three sections B<input>, B<features>
and B<output>, which define the parameters of the input format, the
feature extraction and the output format, respectively.

All parameters of the configuration can be also be specified on the
command-line. That is, if a parameter is specified in the
configuration as B<xx = "yy">, it can be alternatively supplied as a
command-line option by B<--xx "yy">.

=head2 Input formats

B<sally> supports different formats for reading data sets of strings,
which may range from plain files to directories and other structured
resources. Following is a list of supported input formats.

=over 4

=item B<input = {>

=over 4

=item B<input_format = "lines";>

This parameter specifies the input format.

=over 14

=item I<"dir"> 

The input strings are available as binary files in a directory and the
name of the directory is given as I<input> to B<sally>. The suffixes
of the files are used as labels for the extracted vectors.

=item I<"arc"> 

The input strings are available as binary files in a compressed
archive, such as a zip or tgz archive.  The name of the archive is
given as I<input> to B<sally>.  The suffixes of the files are used as
labels for the extracted vectors.

=item I<"lines"> 

The input strings are available as lines in a text file. The name of
the file is given as I<input> to B<sally>.  No label information is
supported by this input format.  The lines need to be separated by
newline and may not contain the NUL character.

=item I<"fasta">

The input strings are available in FASTA format. The name of the file
is given as I<input> to B<sally>. Labels are extracted from the
description of each sequence using a regular expression. Comments are
allowed if they are preceded by either ';' or '>'.

=item I<"stdin"> 

One input string is read from standard input stream. The I<input> 
parameter must be present but is not used and should set to 
I<input = "-">. No label information is supported by this input format.

=back 

=item B<chunk_size = 256;>

To enable an efficient processing of large data sets, B<sally>
processes strings in chunks.  This parameter defines the number of
strings in one of these chunks. Depending on the lengths of the
strings, this parameter can be adjusted to balance loading and
processing of data.

=item B<decode_str = 0;>

If this parameter is set to 1, B<sally> automatically decodes strings that
contain URI-encoded characters.  That is, substrings of the form %XX are
replaced with the byte represented by the hexadecimal number XX.  This
feature comes handy, if binary data is provided using the textual input
format "lines".  For example, HTTP requests can be stored in a single line
if line-breaks are represented by "%0a%0d".

=item B<fasta_regex = " (\\+|-)?[0-9]+";>

The FASTA format allows to equip each string with a short
description. In several data sets this description contains a
numerical label which can be useful in supervised learning tasks. The
parameter is a regular expression which can be used to match numerical
labels, such as +1 and -1.

=item B<lines_regex = "^(\\+|-)?[0-9]+";>

If the strings are available as text lines, the parameter can be used
to extract a numerical label from the start of the strings. The
parameter is a regular expression matching labels, such as +1 and -1.

=back

=item B<};>

=back

=head2 Features

The strings loaded by B<sally> are characterized by a set of features,
where each feature is associated with one dimension of the vector
space. Different types of features can be extracted by changing the 
following parameters.

=over 4

=item B<features = {>

=over 4

=item B<ngram_len = 2;>

=item B<ngram_delim = "%0a%0d";>

The parameter B<ngram_len> specifies the numbers of consecutive words that
are considered as one feature, while the parameter B<ngram_delim> defines
characters for delimiting these words.  The characters can be either
specified as bytes or as hexadecimal numbers prefixed by "%".  If no
delimiters are given, i.e. the parameter B<ngram_delim> is an empty string,
B<sally> considers each byte as an individual word.  The following types of
different feature types can be extracted using these parameters:

=over 14

=item I<words>

The strings are partitioned into substrings (words) using a set of
delimiter characters.  Such partitioning is typical for natural
language processing, where the delimiters are usually defined as
white-space and punctuation symbols.  An embedding using words is
selected by defining a set of delimiter characters (B<ngram_delim>)
and setting the n-gram length to 1 (B<ngram_len>).

=item I<byte n-grams>

The strings are characterized by all possible byte sequences of a
fixed length n (byte n-grams).  These features are frequently used if
no information about the structure of strings is available, such as in
bioinformatics or computer security.  An embedding using byte n-grams
is selected by defining the n-gram length (B<ngram_len>) and setting
the delimiters to an empty string (B<ngram_delim>).

=item I<word n-grams>

The strings are characterized by all possible word sequences of a
fixed length n (word n-grams).  These features require the definition
of a set of delimiters and a length n.  They are often used in natural
language processing as a coarse way for capturing structure of text.
An embedding using word n-grams is selected by defining a set of
delimiter characters (B<ngram_delim>) and choosing an n-gram length
(B<ngram_len>).

=back

=item B<ngram_pos = 0;>

The parameter B<ngram_pos> can be used to enable positional n-grams.  In
contrast to regular n-grams, these subsequences of length n are 
associated with a position in the originating string.  Positional n-grams
thus only match if they appear at the exact same location in a string.  They
are often used in bioinformatics for analysis of DNA sequences (see the work 
of Raetsch and Sonnenburg).

=item B<ngram_sort = 0;>

This parameter can be used to enable sorted n-grams (n-perms). During the
extraction of an n-gram its symbols are sorted according to their
lexographical order. That is, if n-grams are composed of bytes, these bytes
are sorted. If the n-grams are composed of words, the respective words are
sorted. Sorted n-grams can be used to compensate minor perturbation in
string data. For example, the strings "abac" and "aabc" contain the same 
sorted 3-grams, namely "aab" and "abc".

=item B<vect_embed = "bin";>

This parameter specifies how the features are embedded in the vector
space. Supported values are "bin" for associating each dimension with
a binary value, "cnt" for associating each dimension with a count
value and "tfidf" for using a TF-IDF weighting.

=item B<vect_norm = "none";>

The feature vectors extracted by B<sally> can be normalized to a given
vector norm. Supported norms are "l1" for the Taxicab norm (L1) and
"l2" for the Euclidean norm (L2). Normalization is often useful, if
the lengths of the strings varies significantly and thus vectors
differ just due to the number of extracted features.

=item B<vect_sign = 0;>

B<sally> uses a hash function to map individual features to dimensions in
the vector space.  Depending on the number of bits used by this functions,
different features may collide on the same dimension.  Such collisions often
result in larger values at these dimensions.  The parameter B<vect_sign> can
be used to enable a signed embedding.  That is, one bit of the hash function
is used to define a sign for each feature.  Collisions are still possible,
yet their impact is lessened as colliding features not necessary induce
larger values.

=item B<hash_bits = 22;>

B<sally> uses a hash function to map individual features to dimensions. 
This parameter specifies the number of bits used by this hash function and
defines the maximum dimensionality of the vector space with 2 ** bits.  As
the embedding of B<sally> is usually sparse and only a small fraction of
dimensions is non-zero, 22 to 26 bits are often sufficient for representing
the data.  If this parameter is chosen too small, the embedding may suffer
from collisions of features in the vector space.  If it is chosen too large,
several application may choke from the vast amount of dimensions.

=item B<explicit_hash = 0;>

For performance reasons B<sally> maps features to dimensions without
memorizing the n-grams associating with these features.  For certain
analysis tasks, however, it may be necessary to retrieve a full
mapping including the n-grams of each dimension. If this parameter is
enabled B<sally> keeps track of all n-grams and depending on the
selected output format stores them with the extracted feature vectors.

=item B<tfidf_file = "tfidf.fv";>

This parameter specifies a file to store the TF-IDF weights. If the
embedding B<tfidf> is selected, B<sally> first checks if the given
file is present. If it is not available, TF-IDF weights will be
computed from the input data and stored to this file, otherwise the
weights will be read from the file. Keeping a separate file for TF-IDF
weights allows for computing the weighting for a data set, say the
training set, and applying the exact same weighting to further data
sets.

=back

=item B<};>

=back

=head2 Output formats

Once the input strings have been embedded in a vector space, B<sally>
stores the resulting vectors in one of several common formats, which
allows for applying typical tools of statistics and machine learning
to the data, for example, Matlab, Octave, Shogun, Weka, SVMLight and
LibSVM.  

=over 4

=item B<output = {>

=over 4

=item B<output_format = "libsvm";>

Following is a list of output formats supported by B<sally>:

=over 14

=item I<"libsvm"> 

The feature vectors of the embedded strings are stored in the common
libsvm format, which is supported by Shogun, SVMLight and LibSVM. The
name of the output file is given as I<output> to B<sally>.

=item I<"text"> 

The feature vectors of the embedded strings are stored as plain text. 
Each feature vector is represented as a list of dimensions, which is written
to I<output> in the following form
 
    dimension:feature:value,... source 

I<dimension> specifies the index of the dimension, I<feature> a textual
representation of the feature and I<value> the value at the dimension.  If
parameter B<explicit_hash> is not enabled in the configuration, the field
I<feature> is empty.

=item I<"matlab">

The feature vectors of the embedded strings are stored in Matlab
format (v5).  The vectors are stored as a 1 x n struct array with the
fields: data, src, label and feat. The name of the output file is
given as I<output> to B<sally>. Note that great care is required to
efficiently operate with sparse vectors in Matlab. If the sparse
representation is lost during computations, excessive run-time and
memory requirements are likely.

=item I<"cluto"> 

The feature vectors of the embedded strings are stored as a sparse
matrix suitable for the clustering tool Cluto. The first line of
the file is a header for Cluto, while the remaining lines correspond
to feature vectors. The name of the output file is given as I<output>
to B<sally>. Note that Cluto can not handle arbitrarily large vector
spaces and thus the B<"hash_bits"> should be set to values below 24.

=back

=back

=item B<};>

=back

=head1 OPTIONS

The configuration of B<sally> can be refined and altered using several
command-line options. In particular, all parameters of the
configuration can be specified on the command-line. That is, if a
parameter is specified as B<xx = "yy"> in the configuration file, it
can be changed by using the command-line option B<--xx
"zz">. Following is a list of common options:

=head2 I/O options

  -i,  --input_format <format>   Set input format for strings.
       --chunk_size <num>        Set chunk size for processing.
       --decode_str <0|1>        Enable URI-decoding of strings.
       --fasta_regex <regex>     Set RE for labels in FASTA data.
       --lines_regex <regex>     Set RE for labels in text lines.
  -o,  --output_format <format>  Set output format for vectors.

=head2 Feature options

  -n,  --ngram_len <num>         Set length of n-grams.
  -d,  --ngram_delim <delim>     Set delimiters of words in n-grams.
  -p,  --ngram_pos <0|1>         Enable positional n-grams.
  -s,  --ngram_sort <0|1>        Enable sorted n-grams (n-perms).
  -E,  --vect_embed <embed>      Set embedding mode for vectors.
  -N,  --vect_norm <norm>        Set normalization mode for vectors.
       --vect_sign <0|1>         Enabled signed embedding.
  -b,  --hash_bits <num>         Set number of hash bits.
       --explicit_hash <0|1>     Enable explicit hash representation.
       --tfidf_file <file>       Set file name for TFIDF weighting.

=head2 Generic options

  -c,  --config_file <file>      Set configuration file.
  -v,  --verbose                 Increase verbosity.
  -q,  --quiet                   Be quiet during processing.
  -V,  --version                 Print version and copyright.
  -h,  --help                    Print this help screen.

=head1 FILES

=over 4

=item F</etc/sally.cfg> 

The system wide configuration file of B<sally>. See the configuration
section for further details.

=back

=head1 EXAMPLES

Examples on how to use B<sally> in different applications of data
analysis and machine learning are available at
http://www.mlsec.org/sally/examples.html.

=head1 COPYRIGHT

Copyright (c) 2010-2012 Konrad Rieck (konrad@mlsec.org)

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.  This program is distributed without
any warranty. See the GNU General Public License for more details.
=cut
